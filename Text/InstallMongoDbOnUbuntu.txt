Installing MongoDB
===============

The following steps are from this link: https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04 where the explanation for the steps are given in more details. When there is an error at step 4 below, the step 5 is done by referring to the link https://docs.opsmanager.mongodb.com/current/tutorial/provisioning-prep/

1: Import the key which is required for the authenticity check of the mongodb package. Running the following command should result in showing 'OK'.
wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
2: Create a list of file which tells about the repository detail information of mongodb, so later apt command will know where to get the file
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
3: Update the current packages
sudo apt-get update

4: Install mongodb
sudo apt-get install -y mongodb-org
5: If there is any error returned in Step 4, then run the command below to install the mongodb dependencies. Then try to run the step 4 again, and this time there should be no error. 
sudo apt-get install libcurl3 libgssapi-krb5-2 libkrb5-dbg libldap-2.4-2 libpci3 libsasl2-2 snmp liblzma5 openssl

Now the mongodb can be started already as follows: sudo systemctl start mongod
As usual, the status can be checked as follows: sudo systemctl status mongod
Mongodb can be set up to start automatically when the server starts as follows: sudo systemctl enable mongod

If there is any need to allow access through a firewall, it can be set up by a command as follows: sudo ufw allow from your_other_server_ip/32 to any port 27017
The set up above can be checked as follows: sudo ufw status

Verifying the mongodb server
MongoDB is installed in 127.0.0.1 as default which is set up in /etc/mongod.conf
To make mongodb which is installed in a remote server (i.e. not localhost), then change 127.0.0.1 above to 0.0.0.0, then try as http://IP_ADDRESS:27017 and the following text might be shown in the browser: It looks like you are trying to access MongoDB over HTTP on the native driver port.

Set up for connection
================
In general, MongoDB doesn't have any user at the beginning state. So some admin user is to be set up first.

Uninstall MongoDB 
===============
Ref: https://stackoverflow.com/questions/29554521/uninstall-mongodb-from-ubuntu
1: Make sure the mongodb is already stopped. Run the following if needed:
sudo service mongod stop
2: Then clear up all the mongodb-related files
sudo apt-get purge mongodb-org*
sudo rm -r /var/log/mongodb
sudo rm -r /var/lib/mongodb

======= 2 ******* ======= 2 ******* ======= 2 ******* ======= 2 ******* ======= 2 ******* ======= 
=======                                            Documented from the second try                                     =======
======= 2 ******* ======= 2 ******* ======= 2 ******* ======= 2 ******* ======= 2 ******* ======= 

Installing MongoDB
================
Ref: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/. Similar steps already mentioned above are not explained in detail.

1: wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
Outcome => OK
2: echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
Outcome => deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.4 multiverse
3: sudo apt-get update
4: To install lastest version 
sudo apt-get install -y mongodb-org
To install a particular version => sudo apt-get install -y mongodb-org=4.4.2 mongodb-org-server=4.4.2 mongodb-org-shell=4.4.2 mongodb-org-mongos=4.4.2 mongodb-org-tools=4.4.2
5: /etc/mongod.conf can be edited (to change 127.0.0.1 to 0.0.0.0), then the mongodb can be started as 'sudo systemctl start mongod' and status can be checked as 'sudo systemctl status mongod'. Accessing from the browser such as http://IP_ADDRESS:27017 will result with the following text:
It looks like you are trying to access MongoDB over HTTP on the native driver port.

User set up
=========
Ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
=== Set up the admin user ===
1: Run mongoDB without access control
mongod --port 27017 --dbpath /var/lib/mongodb
2: Leave the terminal which run Step 1 still opened, then in a new terminal run mongo which is the mongoDB client shell
mongo --port 27017
3: Then the user can be created by running the scripts below (Use a password as appropriate)
use admin
db.createUser(
  {
    user: "myUserAdmin",
    pwd: passwordPrompt(), // or cleartext password
    roles: [ { role: "userAdminAnyDatabase", db: "admin" }, "readWriteAnyDatabase" ]
  }
)
// Just in one line for easy copy: db.createUser({user: "myUserAdmin", pwd: passwordPrompt(), roles: [ { role: "userAdminAnyDatabase", db: "admin" }, "readWriteAnyDatabase" ]})
4: Since the admin user is already set up, the DB can be started with access control. To do so, first, we have to restart the mongoDB instance. Running the following command from the mongo shell will stop the mongoDB.
db.adminCommand( { shutdown: 1 } )
After running this, the outcome can be checked in the terminal which was opened for Step 1. The MongoDB is already shut down.
=== Set up the DB user ===
5: Now MongoDB can be run again with access control. It's the same command in the Step 1, but --auth is added.
mongod --auth --port 27017 --dbpath /var/lib/mongodb
6: Now we can run the mongo shell again, as follows:
mongo --port 27017
use admin
db.auth("myUserAdmin", passwordPrompt())
7: After the successful login, we can create the DB User. In the following example, a user 'myTester' was created for DB 'test'.
use test
db.createUser(
  {
    user: "myTester",
    pwd:  passwordPrompt(),   // or cleartext password
    roles: [ { role: "readWrite", db: "test" },
             { role: "read", db: "reporting" } ]
  }
)
// Just in one line for easy copy:  db.createUser({user: "myTester", pwd:  passwordPrompt(), roles: [ { role: "readWrite", db: "test" }, { role: "read", db: "reporting" } ]})
=== Do some DB operations ===
8: Now the DB User 'myTester' was already created. We can use this user to connect to DB, and do the DB operations such as insert, update, etc. To connect as this user, we can exit from the current mongo shell or we can use a new one.
mongo --port 27017
use test
db.auth("myTester", passwordPrompt())
9: After the successful login, some DB operations can be tried. 
For example, add one document/record/row in the 'foo' collections/table: db.foo.insert( { x: 1, y: 1 } )
Then, to check the data in the 'foo' collections: db.foo.find({})
=== Next step : To use mongo to connect to mongod run from the standard way (i.e. sudo systemctl start mongod) ===
Above operation is using the mongoDB running from command line as 'mongod --auth --port 27017 --dbpath /var/lib/mongodb'. To use the standard one started by the command 'sudo systemctl start mongod', we need to change the /etc/mongod.conf
1: Enable the security section and add the line below:
authorizaton: enabled
2: Then try to start the mongoDB with 'sudo systemctl start mongod'. This might likely cause an error due to the permission over some mongodb folder and file. So, change the permission as follows (setting the owner as mongodb). Then restart the mongod.
chown -R mongodb:mongodb /var/lib/mongodb
chown mongodb:mongodb /tmp/mongodb-27017.sock
sudo service mongod restart
Finally, after this, MongoDB should be able to connect from the front UI like Mongo Management Studio 
